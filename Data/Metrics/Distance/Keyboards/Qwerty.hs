module Data.Metrics.Distance.Keyboards.Qwerty (
    qwertyCoords
    ) where

import qualified Data.Map.Strict as M

qwertyCoords :: M.Map Char (Int, Int)
qweryCoords = M.union qwertyUnshifted qwertyShifted

qwertyUnshifted :: M.Map Char (Int, Int)
qwertyUnshifted = M.fromList
    [ ('h', (1, 0)), ('j', (2, 0)), ('k', (3, 0))
    , ('l', (4, 0)), (';', (5, 0)), ('\'', (6, 0))
    , ('\n', (7, 0))

    , ('g', (-1, 0)), ('f', (-2, 0))
    , ('d', (-3, 0)), ('s', (-4, 0)), ('a', (-5, 0))

    , ('y', (1, 1)), ('u', (2, 1)), ('i', (3, 1))
    , ('o', (4, 1)), ('p', (5, 1)), ('[', (6, 1))
    , (']', (7, 1)), ('\\', (8, 1))

    , ('t', (-1, 1)), ('r', (-2, 1)), ('e', (-3, 1))
    , ('w', (-4, 1)), ('q', (-5, 1)), ('\t', (-6, 1))

    , ('n', (1, -1)), ('m', (2, -1)), (',', (3, -1))
    , ('.', (4, -1)), ('/', (5, -1))

    , ('b', (0, -1)), ('v', (-1, -1)), ('c', (-2, -1))
    , ('x', (-3, -1)), ('z', (-4, -1))

    , ('6', (1, 2)), ('7', (2, 2)), ('8', (3, 2))
    , ('9', (4, 2)), ('0', (5, 2)), ('-', (6, 2))
    , ('=', (7, 2))

    , ('5', (-1, 2)), ('4', (-2, 2)), ('3', (-3, 2))
    , ('2', (-4, 2)), ('1', (-5, 2)), ('`', (-6, 2))
    ]

qwertyShifted :: M.Map Char (Int, Int)
qwertyShifted = M.mapKeys (M.! qwertyShift) qwertyUnshifted

qwertyShift :: M.Map Char Char
qwertyShift = M.fromList
    [ ('`', '~'), ('1', '!'), ('2', '@'), ('3', '#')
    , ('4', '$'), ('5', '%'), ('6', '^'), ('7', '&')
    , ('8', '*'), ('9', '('), ('0', ')'), ('-', '_')
    , ('=', '+'), ('q', 'Q'), ('w', 'W'), ('e', 'E')
    , ('r', 'R'), ('t', 'T'), ('y', 'Y'), ('u', 'U')
    , ('i', 'I'), ('o', 'O'), ('p', 'P'), ('[', '{')
    , (']', '}'), ('\\', '|'), ('a', 'A'), ('s', 'S')
    , ('d', 'D'), ('f', 'F'), ('g', 'G'), ('h', 'H')
    , ('j', 'J'), ('k', 'K'), ('l', 'L'), (';', ':')
    , ('\'', '"'), ('z', 'Z'), ('x', 'X'), ('c', 'C')
    , ('v', 'V'), ('b', 'B'), ('n', 'N'), ('m', 'M')
    , (',', '<'), ('.', '>'), ('/', '?')
    ]
